0. Joseph Grigoletti 
csc 447 fall 2020 
using zsh/unix on mac os

1. 
2. questions for discord. 

3. Basics
3.1 text editor : Vim & VS Code
3.2 Terminal/console: zsh= oh my zsh, homebrew, brew install tree, etc. 
3.3 tab autocompletion and case insensivity automaticly taken care of with zsh. 
3.4 envirnmental variables. 
  3.4.1 For Linux and OS X, run env or env | sort in a terminal. The latter form sorts the output by variable name. For example:
    $ env | sort

Note: The $ character is the standard last character in prompts for shell programs. 
You should not type the $; just the env | sort

https://en.wikipedia.org/wiki/Sort_(Unix)
prints the lines of its input or concatenation of all files listed in its argument 
list in sorted order.  sort -r reverses order. 

env is a shell command for Unix and Unix-like operating systems. 
It is used to either print a list of environment variables or run another 
utility in an altered environment without having to modify the currently existing 
environment. Using env, variables may be added or removed, and existing variables 
may be changed by assigning new values to them.

In practice, env has another common use. It is often used by shell scripts
 to launch the correct interpreter. In this usage, the environment is typically not changed.

What are env. vars?  
 Simply put, environment variables are variables that are set up in your shell when you log in. 
 They are called “environment variables” because most of them affect the way your Unix shell works 
 for you. One points to your home directory and another to your history file
https://www.networkworld.com/article/3215965/all-you-need-to-know-about-unix-environment-variables.html#:~:text=Simply%20put%2C%20environment%20variables%20are,another%20to%20your%20history%20file.


Some environment variables are set up in system files like /etc/profile that are read 
before your local setup files when you log in.

Environment variables can be changed or unset, but they can also be augmented.
 If your search path is set up in /etc/profile, you can redefine it in your local .profile or 
 add to it with a command like this:

3.5 Per the instructions... installing the requested env vars


// trouble getting baz to display. 

➜  ~ echo ${FOO}

➜  ~ export FOO=bar
➜  ~ echo ${FOO}
bar
➜  ~ Foo=baz
➜  ~ echo ${FOO}
bar
➜  ~ Foo=baz
➜  ~ echo ${FOO}
bar
➜  ~ unset FOO 
➜  ~ echo ${FOO}

//copying and pastying in code. 

zsh: command not found: $
zsh: command not found: $
zsh: command not found: $
zsh: command not found: bar
zsh: command not found: $
zsh: command not found: $
zsh: command not found: baz
zsh: command not found: $
zsh: command not found: $

3.6 home directory
cd ~ home = home directory 
for the class all files will be here: /Users/josephgrigolettiii/Github/csc4472020/ 

3.7 spaces in env. vars. 
* AKA don't use spaces in path names. 
use camel (pascal) or another kind of case: 
 Examples : 
 myIdentifier : Camel case (e.g. in java variable names)****
MyIdentifier : Capital camel case (e.g. in java class names)
my_identifier : Snake case (e.g. in python variable names)
my-identifier : Kebab case (e.g. in racket names)****** This is my favourite****** 
// if given the option this is my ideal and reflects how how i was trained to name documents since DOS, old apple computers, and modern JS files. 

myidentifier : Flat case (e.g. in java package names)*****
MY_IDENTIFIER : Upper case (e.g. in C constant names)

**autocompletion does help with this. 

3.8 PATH envirnmental variable. 
Some environmental variables contain a single path, e.g., C:\Users\bob or /home/bob.
//Necessary for good resuable code? 
// ex. login info 
Other environmental variables contain a sequence of paths, e.g., 

C:\Users\alice;C:\Users\bob;C:\Users\charlie or /home/alice:/home/bob:/home/charlie. 
The character between paths is called the path delimiter. The path delimiter character for Windows is the semicolon ;. 

The path delimiter character for Linux and OS X is the colon :.

A path, the general form of the name of a file or directory, specifies a unique location in a
 file system. A path points to a file system location by following the directory tree hierarchy 
 expressed in a string of characters in which path components, separated by a delimiting character, 
 represent each directory. The delimiting character is most commonly the slash ("/"),
  the backslash character ("\"), or colon (":"), though some operating systems may use a 
  different delimiter. Paths are used extensively in computer science to represent the directory/file 
  relationships common in modern operating systems, and are essential in the construction of 
  Uniform Resource Locators (URLs). Resources can be represented by either absolute or relative paths.


learning shell scripting: on the home directory, create a new directory 

setup.sh file. --> to create or modify. 


in the root directly used vim (and nano to verify) setup.sh file in cd ~ directory and added 
PATH=/some/new/software:${PATH}


4. Preq. Java. 
4.1 Java is already installed. We will not be needing to reinstall the java sdk. 
we are running javac 14.0.1
we are going to downgrade to java 11 for scala per the directions. 
** I'm going to use homebrew to handle this. see this stackoveflow article. 
https://stackoverflow.com/questions/26252591/mac-os-x-and-multiple-java-versions 

jenv allows us to manage the installed versions of java

install homebrew, homebrew install jenv,  install homebrew cask, add the java version, add this version for jenv to manage it. Verify. 
you can "brew search java" 
install homebrew jenv. 
brew install jenv. 
add homebrew cask verions (brew tap homebrew/cask-versions)  //this is needed to download older versions. 

brew cask install java11****** This is what we will use. (8 or 11)
jenv add <javaVersionPathHere>
----
alternative way? https://intellipaat.com/community/8277/how-to-set-or-change-the-default-java-jdk-version-on-os-x

which java? 
switch using java console. $ export JAVA_HOME=`/usr/libexec/java_home -v 11` # java 11

4.2 hello world app. 
files included + a screen shot. 

5. the C programming language. 
5.1 needed the C or C++ compiler (mac uses the gcc or clang). update xcode. 
5.2 C Hello world. 


notes
https://www.geeksforgeeks.org/difference-int-main-int-mainvoid/#:~:text=In%20C%2B%2B%2C%20both%20fun,a%20recommended%20practice%20in%20C.
In C, if a function signature doesn’t specify any argument, it means that the function can be called with any number of parameters or without any parameters. 

how to compile and execute the app
https://stackoverflow.com/questions/32337643/how-to-run-c-program-on-mac-os-x-using-terminal
1. save file as helloWorld.c 
2. install compiler (default xcode others are listed). xcode uses "gcc" and/or "clang" --> both work!

3. gcc helloWorld.c [-o helloWorld] if
or 
clang helloWorld.c 

4. execute compiled file: 
  select it and just enter. 
  
5.3 pointers

//consider the following code, replace the comments with code so the value of x = 10 when it is printed. 
#include <stdio.h>
#include <stdlib.h>

void update (int* p) {
  /* TODO */
}

int main () {
  int x = 5;
  update (/* TODO */);
  printf ("%d\n", x);
}

//this was copy pasted. i will retype it out in the pointer.c file and work on it there. 

//see pointer.c file and/or screen shot. 



5.4 allocation location. 

Consider the following C program.

#include <stdio.h>
#include <stdlib.h>

int x = 5;

int main () {
  int y = 10;
  int* p = (int*) malloc (sizeof (int));
}
Answer the following questions:

Where in memory is x allocated?
global memory
//think of it like global scope.  or classes

Where in memory is y allocated?
activation record for main (aka stock frama) stored on the call stack. 

//think of it like local scope. or an object () 

Where in memory is p allocated?
same as p. 


y = p 

Where in memory is p pointing to?
on the heap. 

https://gribblelab.org/CBootCamp/7_Memory_Stack_vs_Heap.html#:~:text=them%2C%20is%20running-,The%20Heap,are%20built%2Din%20C%20functions.


The Heap. The heap is a region of your computer's memory that is not managed automatically for you, and is not as tightly managed by the CPU. It is a more free-floating region of memory (and is larger). To allocate memory on the heap, you must use malloc() or calloc() , which are built-in C functions.
