Midterm  Review: 



Scheme :

-Quiz:

--The C programming language uses both statements and expressions.
--The Java programming language uses both statements and expressions.
--The Scheme programming language doens't use both statements & expressions. 

How to run Scheme code : 


--What is the result of running this Scheme code?
(define (foo x y) (* x x x))
(foo 2 3)

8

--What is the result of running this Scheme code?
(string-append "a" (if (>= (+ 2 1) 4) "b" (string-append "c" "d")) "e")

"acde"


--What happens when this Java code is compiled and run on a linked list with 6 elements 1, 2, 3, 4, 5, 6 (in that order)?
  class Node {
    int item;
    Node next;
  }

  static int foo (Node data) {
    if (data.next == null) {
      return data.item;
    } else {
      return foo (data.next);
    }
  }


  	Returns 6



 -- Which of the following is the correct definition of a function to sum all of the numbers in a list?

 	(define (sum xs) 
  (if (equal? xs ())
     0
     (+ (car xs) (sum (cdr xs)))))


 --Consider the Scheme conditional with general form (for expressions e1, e2, e3):
(if e1 e2 e3)
Why is it clear that if is not a function like + or string-append?

Because the conditional expression must not evaluate all of its arguments unconditionally, but a function does evaluate all of its arguments unconditionally.


--Consider the following Scheme program:
(define (foo n)
  (if (<= n 0)
    0
    (foo (- n 1))))

When we evaluate (foo 5), how many times is foo called in total?

6


Consider the following Scheme program:
(define (foo n)
  (if (= n 0)
    0
    (+ (foo (- n 1)) (foo (- n 1)))))
When we evaluate (foo 5), how many times is foo called in total?



63







Worksheet Scheme:

Code samples Scheme: 





-Typing & Scala: 

-Quiz: 


--Consider the following C program

int main () {
  int x = 2123456789;
  float y = x;
  printf ("y=%f\n", y);
  return 0;
}
Suppose that we want to compile and execute this program. Choose the option below that describes what happens when this is attempted.

*Note that a compiler warning is not the same as a compiler error. This question asks about errors, not warnings.
*Note that when numbers are converted, there is sometimes a loss of precision, but this is not an unsafe access.

The program compiles successfully without errors; when we run it, execution completes successfully without crashes; there are no unsafe accesses



--Consider the following C program

int main () {
  int x = 2123456789;
  float *p = &x;
  float y = *p;
  printf ("y=%f\n", y);
  return 0;
}
Suppose that we want to compile and execute this program. Choose the option below that describes what happens when this is attempted.

*Note that a compiler warning is not the same as a compiler error. This question asks about errors, not warnings.

*Note that when numbers are converted, there is sometimes a loss of precision, but this is not an unsafe access.

The program compiles successfully without errors; when we run it, execution completes successfully without crashes; but there is an unsafe access.



--Consider the following Java program

public class Foo {
  static class Node {
    Object item;
    Node next;
    Node (Object item, Node next) {
      this.item = item;
      this.next = next;
    }
  }

  public static void main (String[] args) {
    Node data = null;
    data = new Node ("hello", data);
    data = new Node (5, data);
    while (data != null) {
      String s = (String) data.item;
      System.out.println (s);
    }
  }
}
Suppose that we want to compile and execute this program. Choose the option below that describes what happens when this is attempted.


The program compiles successfully without errors; when we run it, execution stops with a crash/error/exception.



--Suppose we evaluate the following Scala expression
(1::2::3::Nil).reverse
How many cons cells are there in the result?

3


--Suppose we evaluate the following Scala expression
(1::2::3::Nil) ::: (4::5::6::Nil)
How many cons cells are there in the result?

6


--Suppose we evaluate the following Scala expression

List (List (1,2,3), List(4,5,6))
How many cons cells are there in the result? Be sure to count all of the cons cells in the result, not just those in the top level list.

8


--What is the type of the following Scala expression?
List ( (1,"the"), (2,"rain"), (3,"in"), (4,"spain") )

List[(Int,String)]



--What is the result of evaluating the following Scala expression:
{ var x= 1; x = x + 1; x } * { var x = 1; x = x + 1; x }

4


Consider the following Scala function definition:
def f (x:Int) : Int = if (x == 0) 0 else x + f (x - 1)
With that definition, what is the result of evaluating the following Scala expression?
f(5)

15


--Consider the following Scala function definition:
def f [X] (xs:List[X]) = xs match {
  case Nil => Nil
  case y::ys => ys
}
What type does the pattern variable ys have?

List[X]






-Worksheet:
-Code Examples:






Recursion & Functional Programming: 

-Quiz:

--Consider the following Scala function definition.
  def f [X] (xs:List[X]) : List[X] = {
    xs match {
      case Nil   => Nil
      case y::ys => y::(y::(f (ys)))
    }
  }
If this function is executed on a list of length N, what is the length of the resulting list?

2N


--Consider the following Scala function definition.
  def f [X] (xs:List[X], ys:List[X]) : List[X] = {
    xs match {
      case Nil   => ys
      case z::zs => z::(f (zs, ys))
    }
  }
If this function is executed on two lists of length M and N respectively, what is the length of the resulting list?

M+N



--Consider the following Scala function definition.
  def f [X] (xs:List[X]) : List[X] = {
    xs match {
      case Nil   => Nil
      case y::ys => f (ys) ::: List (y)
    }
  }

What is the result of evaluating the following Scala code?
  val myList:List[(Int,Int)] = List( (1,2), (3,4), (5,6) )
  f (myList)

List((5,6), (3,4), (1,2))




--What is the result of evaluating the following Scala code?
List (1,2,3,4,5,6,7,8,9,10).filter ((x:Int) => (x%2) == 0).map ((x:Int) => x*2)

List(4,8,12,16,20)






--What is the result of evaluating the following Scala code?
List (1,2,3,4,5,6,7,8,9,10).map ((x:Int) => x*2).filter ((x:Int) => (x%2) == 0)

List(2,4,6,8,10,12,14,16,18,20)





--Which types should replace ?1 and ?2 in the following Scala function definition?
def f [X] (xss:?1) : ?2 = for (xs <- xss; x <- xs) yield x

	
?1 = List[List[X]]
?2 = List[X]






--Which types should replace ?1, ?2, ?3 in the following Scala function definition?
def g [X,Y] (xs:?1, f:?2) : ?3 = {
  xs match {
    case Nil   => Nil
    case y::ys => f(y) :: g(ys, f)
  }
}

	
?1 = List[X]
?2 = X=>Y
?3 = List[Y]









-Worksheet:
-Code Examples:




Algebraic Data Types:  

-Quiz:

--What type (if any) does the following Scala expression have?
List (None, Some (List (Some (1), None, Some (2))))

List[Option[List[Option[Int]]]]


--Consider the following Scala function definitions:
def f [X,Y] (a:Option[X], g:X=>Y) : Option[Y] = {
  a match {
    case None     => None
    case Some (x) => Some (g (x))
  }
}

def index [X] (xs:List[X], n:Int) : Option[X] = {
  xs match {
    case Nil               => None
      case y::ys if (n == 0) => Some (y)
    case _::ys             => index (ys, n - 1)
  }
}
What is the output of running:
f (index (List (10, 11, 12), 1), (n:Int) => n * 2)


Some(22):Option[Int]



--Consider the following Scala function definitions:
def f [X,Y] (a:Option[X], g:X=>Y) : Option[Y] = {
  a match {
    case None     => None
    case Some (x) => Some (g (x))
  }
}

def index [X] (xs:List[X], n:Int) : Option[X] = {
  xs match {
    case Nil               => None
      case y::ys if (n == 0) => Some (y)
    case _::ys             => index (ys, n - 1)
  }
}
What is the output of running:
f (index (List (10, 11, 12), 5), (n:Int) => n * 2)

None:Option[Int]




--Consider the following Scala case class and function definitions:
trait Result[+X,+Y]
case class Error[+Y] (s:Y) extends Result[Nothing,Y]
case class Ok   [+X] (n:X) extends Result[X,Nothing]

def combine[U,X,Y] (us:List[U], f:U=>Result[X,Y]) : Result[List[X],List[Y]] = {
  us match {
    case Nil   => Ok (Nil)
    case v::vs =>
      (f (v), combine (vs, f)) match {
        case (Error (s), Error (ss)) => Error (s::ss)
        case (Ok    (n), Error (ss)) => Error (ss)
        case (Error (s), Ok    (ns)) => Error (List (s))
        case (Ok    (n), Ok    (ns)) => Ok (n::ns)
      }
  }
}
What is the output of running:
combine (List(1,2,3), (n:Int) => if (n%2==0) Ok (n) else Error (n))


Error(List(1,3)):Result[List[Int],List[Int]]



--Consider the following Scala case class and function definitions:
trait Result[+X,+Y]
case class Error[+Y] (s:Y) extends Result[Nothing,Y]
case class Ok   [+X] (n:X) extends Result[X,Nothing]

def combine[U,X,Y] (us:List[U], f:U=>Result[X,Y]) : Result[List[X],List[Y]] = {
  us match {
    case Nil   => Ok (Nil)
    case v::vs =>
      (f (v), combine (vs, f)) match {
        case (Error (s), Error (ss)) => Error (s::ss)
        case (Ok    (n), Error (ss)) => Error (ss)
        case (Error (s), Ok    (ns)) => Error (List (s))
        case (Ok    (n), Ok    (ns)) => Ok (n::ns)
      }
  }
}
What is the output of running:
combine (List(0,2,4), (n:Int) => if (n%2==0) Ok (n) else Error (n))


Ok(List(0, 2, 4)) : Result[List[Int],List[Int]]




--Consider the following Scala case class and function definitions:
trait Result[+X,+Y]
case class Error[+Y] (s:Y) extends Result[Nothing,Y]
case class Ok   [+X] (n:X) extends Result[X,Nothing]

def combine[U,X,Y] (us:List[U], f:U=>Result[X,Y]) : Result[List[X],List[Y]] = {
  us match {
    case Nil   => Ok (Nil)
    case v::vs =>
      (f (v), combine (vs, f)) match {
        case (Error (s), Error (ss)) => Error (s::ss)
        case (Ok    (n), Error (ss)) => Error (ss)
        case (Error (s), Ok    (ns)) => Error (List (s))
        case (Ok    (n), Ok    (ns)) => Ok (n::ns)
      }
  }
}
The Result type is used to provide either an Ok (indicating successful completion with an associated value) or Error (indicating an error with an associated value). The combine function applies a function f to every element of a list, where f may either succeed or fail. Which description best matches the behavior of the combine function?


Returns a collection of all of the errors when any error occurs, even if there are some successes.




--NOT tail-recursive. 
[True or false] The following Scala function is tail-recursive:
    def f [X] (xs:List[X], ys:List[X]) : List[X] = {
    xs match {
      case Nil   => ys
      case z::zs => z::(f (zs, ys))
    }
  }


 --NOT Tail-recursive. 
   def f [X] (xs:List[X]) : List[X] = {
    xs match {
      case Nil   => Nil
      case y::ys => f (ys) ::: List (y)
    }
  }


--Tail-recursive  
def f [X] (xs:List[X], ys:List[X]) : List[X] = {
    xs match {
      case Nil   => ys
      case z::zs => f (zs, z::ys)
    }
  }



-Worksheet:
-Code Examples:
